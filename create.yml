# trigger:
# - none

parameters:
  - name: correlation_id
    displayName: Correlation id
    type: string
  - name: create
    displayName: Json objet with create data
    type: string
  - name: create_type
    displayName: type
    type: string
  - name: cli_login
    displayName: CLI login (json)
    type: string
  - name: workspace_slug
    displayName: Workspace name
    type: string
  - name: actions
    displayName: Actions (json)
    type: string
  - name: git_org
    displayName: azure git project
    type: string
  - name: config
    displayName: Extra config (json)
    type: string
    default: "{\"default_branch\": \"main\", \"debug\": true, \"stk\": \"stk-beta\", \"origin_repository\": \"stack-spot/stackspot-workflows-action\", \"origin_branch\": \"main\"}"

# pool:
#   name: local

# jobs:
# - job:
#   displayName: ${{ parameters.correlation_id }}
steps:
- bash: |
    ## config
    debug=$(echo '${{ parameters.config }}' | jq -cr '.debug // empty')
    echo "##vso[task.setvariable variable=DEBUG;]$debug"
  
    stk=$(echo '${{ parameters.config }}' | jq -cr '.stk // empty')
    echo "##vso[task.setvariable variable=stk;]$stk"

    default_branch=$(echo '${{ parameters.config }}' | jq -cr '.default_branch // empty')
    echo "##vso[task.setvariable variable=default_branch;]$default_branch"

    ## cli_login
    email=$(echo '${{ parameters.cli_login }}' | jq -cr '.email // empty')
    echo "##vso[task.setvariable variable=email;]$email"

    realm=$(echo '${{ parameters.cli_login }}' | jq -cr '.realm // empty')
    echo "##vso[task.setvariable variable=realm;]$realm"

    ## create
    create_name=$(echo '${{ parameters.create }}' | jq -cr '.name // empty')
    echo "##vso[task.setvariable variable=create_name;]$create_name"

    create_description=$(echo '${{ parameters.create }}' | jq -cr '.description // empty')
    echo "##vso[task.setvariable variable=create_description;]$create_description"

    create_inputs=$(echo '${{ parameters.create }}' | jq -cr '.inputs // empty')
    echo "##vso[task.setvariable variable=create_inputs;]$create_inputs"

    create_connectors=$(echo '${{ parameters.create }}' | jq -cr '.connectors // empty')
    echo "##vso[task.setvariable variable=create_connectors;]$create_connectors"

    create_starter=$(echo '${{ parameters.create }}' | jq -cr '.starter // empty')
    echo "##vso[task.setvariable variable=create_starter;]$create_starter"

    create_stack=$(echo '${{ parameters.create }}' | jq -cr '.stack // empty')
    echo "##vso[task.setvariable variable=create_stack;]$create_stack"

    create_repo=$(echo '${{ parameters.create }}' | jq -cr '.repo // empty')
    echo "##vso[task.setvariable variable=create_repo;]$create_repo"

    ## actions
    actions_before=$(echo '${{ parameters.actions }}' | jq -cr '.before')
    echo "##vso[task.setvariable variable=actions_before;]$actions_before"

    actions_after=$(echo '${{ parameters.actions }}' | jq -cr '.after')
    echo "##vso[task.setvariable variable=actions_after;]$actions_after"

    ##VALIDATIONS

    ## create
    [ "$create_name" = "null" ] && echo "ERROR: 'name' field not found in json for 'create' input" >&2
    [ "$create_description" = "null" ] && echo "ERROR: 'description' field not found in json for 'create' input" >&2
    [ "$create_description" = "null" ] && echo "ERROR: 'description' field not found in json for 'create' input" >&2
    [ "$create_starter" = "null" ] && [ "$create_stack" = "null" ] && echo "ERROR: 'starter' and 'stack' field not found in json for 'create' input" >&2

    ## cli_login
    [ "$realm" = "null" ] && echo "ERROR: 'realm' field not found in json for 'cli_login' input" >&2
    [ "$email" = "null" ] && echo "ERROR: 'email' field not found in json for 'cli_login' input" >&2

    ## config
    [ "$default_branch" = "null" ] && echo "ERROR: 'default_branch' field not found in json for 'config' input" >&2
    [ "$debug" = "null" ] && echo echo "ERROR: 'debug' field not found in json for 'config' input" >&2
    [ "$stk" = "null" ] && echo echo "ERROR: 'stk' field not found in json for 'config' input" >&2

    ##GIT
    git config --global user.email $email
    git config --global user.name $email

    echo "secret_stk_login=$(secret_stk_login)"

  failOnStderr: true
  displayName: Validate Inputs and pre-configs

- template: templates/install-stk-cli.yml

- template: templates/login-stk.yml

- bash: |
    echo "$(stk) use workspace ${{ parameters.workspace_slug }}"
    $(stk) use workspace "${{ parameters.workspace_slug }}"
  displayName: Use Workspace ${{ parameters.workspace_slug }}

- template: templates/run-actions.yml
  parameters:
    actions: $(actions_before)
    git_org: ${{ parameters.git_org }}
    time: before
  
- template: templates/checkout-repo.yml
  parameters:
    path: user_repo

- bash: |
    # source ../templates/enable_colors.sh
    if $(DEBUG)
    then
      export APPLY_PLUGIN_ENABLE_DEBUG=true
      export COMMAND_ARGS_ENABLE_DEBUG=true
    fi

    conn=""
    connPrint=""
    if [ '$(create_connectors)' != '' ]; then 
        conn="--connection-interfaces $(echo '$(create_connectors)' | jq . -c)"
        connPrint="--connection-interfaces '$(echo '$(create_connectors)' | jq )'" 
    fi

    inputsValue="{}"
    inputsPrint=""
    if [ '$(create_inputs)' != '' ]; then 
        inputsValue=$(echo '$(create_inputs)' | jq . -c)
        inputsPrint="--inputs-json '$(echo '$(create_inputs)' | jq )'" 
    fi

    starter_stack="--starter $(create_starter)"
    if [ '${{ parameters.create_type }}' == 'infra' ]; then 
      starter_stack="--stack $(create_stack)"
    fi

    echo -e "\n${green}âš¡ Running create ${{ parameters.create_type }} - ${u_cyan}$(create_name)"
    echo -e "$(stk) create ${{ parameters.create_type }} $(create_name) $starter_stack $connPrint --remote https://dev.azure.com/${{ parameters.git_org }}/$(create_name) --description '$(create_description)' $inputsPrint --non-interactive\n" 

    $(stk) create ${{ parameters.create_type }} $(create_name) $starter_stack $conn --remote https://dev.azure.com/${{ parameters.git_org }}/$(create_name) --description "$(create_description)" --inputs-json "$inputsValue" --non-interactive
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Create ${{ parameters.create_type}}

- bash: |
    cd $(create_name)
    $(stk) register ${{ parameters.create_type}}
  failOnStderr: true
  workingDirectory: user_repo
  displayName: Register ${{ parameters.create_type}}

- bash: |
    if [[ `git status --porcelain` ]]; then
      rm -rf $(create_name)/.git
      cp -r $(create_name)/. .
      rm -rf $(create_name)
      git add -A
      git commit -am "stackspot initial commit"
      git push --set-upstream --force origin $(default_branch)
    fi
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Commit and Push

- template: templates/run-actions.yml
  parameters:
    actions: $(actions_after)
    git_org: ${{ parameters.git_org }}
    time: after

- bash: |
    if [[ `git status --porcelain` ]]; then
      git add -A
      git commit -am "stackspot commit after actions"
      git push
    fi
  workingDirectory: user_repo
  failOnStderr: true
  displayName: Commit and Push

- bash: |
    cat ~/.$(stk)/logs/*
  displayName: Show Error Log
  condition: failed()